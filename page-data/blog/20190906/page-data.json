{"componentChunkName":"component---src-templates-post-post-jsx","path":"/blog/20190906","result":{"data":{"markdownRemark":{"html":"<p><a href=\"https://storybook.js.org/docs/guides/guide-react/\" target=\"_blank\" rel=\"nofollow\">Storybook Guides</a></p>\n<p><img src=\"https://i.imgur.com/186Ecqp.png\"></p>\n<blockquote>\n<p>TDD (Test Driven Development)\n: 先寫測試再開發程式\n定義一些 user story 做需求分析，規劃撰寫程式時所要尊循的程序</p>\n<p><img src=\"https://i.imgur.com/2gXymfv.png\"></p>\n</blockquote>\n<p>註：BDD (Behavior-driven development)<br>\n則是比起 TDD 更進一步，除了在實作前先寫測試外，測試前還要先寫通過自然語言定義系統行為的可以執行的規格</p>\n<ul>\n<li>2019/6/29 發布 v5.1.9 與先前版本差異較大</li>\n<li>方便開發 UI 元件</li>\n<li><strong>視覺測試</strong>元件在每個狀態下的外觀（也有<a href=\"https://www.learnstorybook.com/react/zh-TW/simple-component/\" target=\"_blank\" rel=\"nofollow\">快照測試</a> addon）</li>\n<li>作為共同維護的文件，日後好交接</li>\n<li>與應用程式的業務邏輯和上下文隔離開來，耦合高的元件難以抽出單獨重現</li>\n<li><a href=\"https://storybook.js.org/docs/basics/live-examples/\" target=\"_blank\" rel=\"nofollow\">Live Examples</a><br><br></li>\n</ul>\n<p>團隊好從 Components 開始分工並開發</p>\n<hr>\n<h2>Setup (React)</h2>\n<h3>React 專案自動設定 Storybook</h3>\n<p><code>npx -p @storybook/cli sb init --type react</code></p>\n<h3>React 專案手動設定 Storybook</h3>\n<ol>\n<li><code>npm install @storybook/react --save-dev</code></li>\n<li>Make sure that you have <code>react</code>, <code>react-dom</code>, <code>@babel/core</code>, and <code>babel-loader</code> in your dependencies</li>\n<li><code>package.json</code> scripts add <code>\"storybook\": \"start-storybook\"</code></li>\n<li>\n<p>root add <code>.storybook/config.js</code> with</p>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">import { configure } from &#39;@storybook/react&#39;;\n\nfunction loadStories() {\n require(&#39;../stories/index.js&#39;);\n // You can require as many stories as you need.\n\n // 或引入所有符合規則檔\n // const req = require.context(&#39;../stories&#39;, true, /\\.stories\\.js$/);\n // req.keys().forEach(filename =&gt; req(filename));\n}\n\nconfigure(loadStories, module);</code>\n        </deckgo-highlight-code>\n<p>註：<a href=\"https://webpack.js.org/guides/dependency-management/#requirecontext\" target=\"_blank\" rel=\"nofollow\">require.context</a></p>\n</li>\n<li>\n<p>root add <code>stories/index.js</code> with</p>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">import React from &#39;react&#39;;\nimport { storiesOf } from &#39;@storybook/react&#39;;\nimport { Button } from &#39;@storybook/react/demo&#39;;\n\nstoriesOf(&#39;Button&#39;, module)\n .add(&#39;with text&#39;, () =&gt; &lt;Button&gt;Hello Button&lt;/Button&gt;)\n .add(&#39;with emoji&#39;, () =&gt; (\n   &lt;Button&gt;\n     &lt;span role=&quot;img&quot; aria-label=&quot;so cool&quot;&gt;\n       😀 😎 👍 💯\n     &lt;/span&gt;\n   &lt;/Button&gt;\n ));</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>run storybook <code>npm run storybook</code></p>\n<ul>\n<li>package.json script <a href=\"https://storybook.js.org/docs/configurations/cli-options/\" target=\"_blank\" rel=\"nofollow\">可以設定</a> 如 -p 設固定 port</li>\n</ul>\n</li>\n</ol>\n<h2>React + Antd + Storybook</h2>\n<p>要載入 antd &#x26; scss 檔需手動做 <a href=\"https://storybook.js.org/docs/configurations/custom-webpack-config/\" target=\"_blank\" rel=\"nofollow\"><code>webpack.config.js</code></a> 設定</p>\n<ol>\n<li>\n<p>方法一\n.storybook/webpack.config.js</p>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">const path = require(&#39;path&#39;);\n\nmodule.exports = async ({ config, mode }) =&gt; {\n config.module.rules.push({\n   test: /\\.less$/,\n   loaders: [\n     &#39;style-loader&#39;,\n     &#39;css-loader&#39;,\n     {\n       loader: &#39;less-loader&#39;,\n       options: {\n         modifyVars: {\n         ...\n         },\n         javascriptEnabled: true,\n       },\n     },\n   ],\n });\n\n return config;\n};</code>\n        </deckgo-highlight-code>\n<p>.storybook/config.js\n<code>import 'antd/dist/antd.less';</code></p>\n</li>\n<li>\n<p>方法二\n.storybook/webpack.config.js</p>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">const path = require(&#39;path&#39;);\n\nmodule.exports = async ({ config, mode }) =&gt; {\n config.module.rules.push({\n   loader: &#39;babel-loader&#39;,\n   exclude: /node_modules/,\n   test: /\\.(js|jsx)$/,\n   options: {\n     presets: [&#39;@babel/react&#39;],\n     plugins: [\n       [\n         &#39;import&#39;,\n         {\n           libraryName: &#39;antd&#39;,\n           libraryDirectory: &#39;es&#39;,\n           style: true,\n         },\n       ],\n     ],\n   },\n });\n\n config.module.rules.push({\n   test: /\\.less$/,\n   loaders: [\n     &#39;style-loader&#39;,\n     &#39;css-loader&#39;,\n     {\n       loader: &#39;less-loader&#39;,\n       options: {\n         modifyVars: {\n         ...\n         },\n         javascriptEnabled: true,\n       },\n     },\n   ],\n   include: [\n     path.resolve(__dirname, &#39;../src&#39;),\n     /[\\\\/]node_modules[\\\\/].*antd/,\n   ],\n });\n\n return config;\n};</code>\n        </deckgo-highlight-code>\n</li>\n</ol>\n<h4>.storybook/config.js 載入檔案設定</h4>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">import { configure } from &#39;@storybook/react&#39;;\n\nconst req = require.context(&#39;../stories&#39;, true, /\\.stories\\.js$/);\n\nfunction loadStories() {\n  // require(&#39;../stories/index.js&#39;);\n  req.keys().forEach((filename) =&gt; req(filename));\n}\n\nconfigure(loadStories, module);</code>\n        </deckgo-highlight-code>\n<h4><a href=\"https://storybook.js.org/docs/configurations/options-parameter/\" target=\"_blank\" rel=\"nofollow\">addParameters</a></h4>\n<p>設置 Storybook 版面（optional）</p>\n<h4><a href=\"https://storybook.js.org/docs/addons/introduction/\" target=\"_blank\" rel=\"nofollow\">addDecorator</a></h4>\n<p>刻制元件顯示的區塊佈景配置</p>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">const styles = {\n  textAlign: &#39;center&#39;,\n};\nconst CenterDecorator = (storyFn) =&gt; &lt;div style={styles}&gt;{storyFn()}&lt;/div&gt;;\naddDecorator(CenterDecorator);</code>\n        </deckgo-highlight-code>\n<h2>Using addons</h2>\n<p>常用擴充 storybook 功能像是：看事件觸發、看元件 notes、<a href=\"https://www.npmjs.com/package/@storybook/addon-knobs\" target=\"_blank\" rel=\"nofollow\">看元件 properties 定義</a>（須先寫好 stories）</p>\n<ol>\n<li><code>npm install @storybook/addons @storybook/addon-actions @storybook/addon-knobs @storybook/addon-notes</code></li>\n<li>add <code>.storybook/addons.js</code> with</li>\n</ol>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">// 版面功能 Tab 順序跟 import 順序有關\nimport &#39;@storybook/addon-actions/register&#39;; // 可寫觸發事件log\nimport &#39;@storybook/addon-knobs/register&#39;; // 可寫props定義預設值並輸入修改\nimport &#39;@storybook/addon-notes/register&#39;; // 可寫說明筆記\nimport &#39;@storybook/addon-storysource/register&#39;; // 可看使用的stories片段程式碼(註)</code>\n        </deckgo-highlight-code>\n<p>註 .storybook/webpack.config.js</p>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\" >\n          <code slot=\"code\">config.module.rules.push({\n  test: /\\.stories\\.jsx?$/,\n  loaders: [\n    {\n      loader: require.resolve(&#39;@storybook/addon-storysource/loader&#39;),\n      options: {\n        prettierConfig: {\n          printWidth: 100,\n          singleQuote: false,\n        },\n      },\n    },\n  ],\n  enforce: &#39;pre&#39;,\n});</code>\n        </deckgo-highlight-code>\n<p><a href=\"https://storybook.js.org/addons/\" target=\"_blank\" rel=\"nofollow\">addon gallery</a> 可以尋找適合的 addons\n沒適合的也可以<a href=\"https://storybook.js.org/docs/addons/writing-addons/\" target=\"_blank\" rel=\"nofollow\">自己寫 addon</a></p>\n<hr>\n<h2>遇到問題</h2>\n<ol>\n<li>元件所需 localstorage</li>\n<li>HOC 元件</li>\n<li>無法輕易將有容器 container 的 component 單獨抽出</li>\n</ol>","timeToRead":4,"frontmatter":{"title":"初探 Storybook","date":"06 Sep 2019","tags":["javascript"],"path":"blog/20190906","excerpt":"初探這款能夠在開發前端元件或是函式庫的同時，可以快速地建立元件各種操作模式或是樣式的工具。"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"path":"blog/20170508","title":"WebForm 圖片上傳檢查","tags":["asp.net"],"excerpt":"開放上傳有可能被傳奇怪東西的風險，只檢查所看到的副檔名，謹慎來說似乎是不夠的。"}}},{"node":{"frontmatter":{"path":"blog/20170421","title":"存取遠端 EventLog","tags":["asp.net","javascript"],"excerpt":"在公司中實作一個 Event log 的查詢工具。（之後來寫了 D3 呈現查詢異常查詢的部分）"}}},{"node":{"frontmatter":{"path":"blog/20170604","title":"Web App 推播通知","tags":["asp.net"],"excerpt":"隨著行動和穿載裝置的興起，推播通知 (Push Notification) 成為維繫App用戶關係相當有力的工具"}}},{"node":{"frontmatter":{"path":"blog/20170714","title":"WebForm 使用 reCAPTCHA 驗證","tags":["asp.net"],"excerpt":"這個我不是機器人驗證一定不陌生，滿多登入畫面會看到的，剛好今天接到把圖形驗證改為 reCAPTCHA 就順手記下。"}}},{"node":{"frontmatter":{"path":"blog/20170728","title":"WebForm 註冊 JavaScript","tags":["asp.net","javascript"],"excerpt":"動態產生JS在目前公司專案中是滿常用到的小技巧，不同的用法會產生在Web Page 的不同位置而有直譯式語言的前後順序差。"}}},{"node":{"frontmatter":{"path":"blog/20180514","title":"JavaScript 中 this 指向","tags":["javascript"],"excerpt":"簡介 this 指向的六種情況。"}}},{"node":{"frontmatter":{"path":"blog/20190108","title":"JavaScript 認識非同步 Callback, Promise, async/await","tags":["javascript"],"excerpt":"Asynchronous 非同步的不同寫法的整理筆記。"}}},{"node":{"frontmatter":{"path":"blog/20190707","title":"JavaScript HTML5 Web Worker & CRA 使用踩雷","tags":["javascript"],"excerpt":"JavaScript 是單執行緒、單線程的程式語言，所有的程式碼片段都會在堆疊中被執行，Web worker 相當於可讓主線程開其他 thread。"}}},{"node":{"frontmatter":{"path":"blog/20180521","title":"Web 常見攻擊手法","tags":["security"],"excerpt":"擁有基本的資安觀念保護好自家資料和 user 使用環境是開發人員重要的一點。"}}},{"node":{"frontmatter":{"path":"blog/20191107","title":"Javascript Event loop - macro task & micro task","tags":["javascript"],"excerpt":"介紹 Event loop 容易混淆的異步任務 macro task & micro task。"}}},{"node":{"frontmatter":{"path":"blog/20210109-3","title":"REST / RESTful & HTTP Methods","tags":["javascript"],"excerpt":"簡易整理。"}}},{"node":{"frontmatter":{"path":"blog/20210109-2","title":"IntersectionObserver","tags":["javascript"],"excerpt":"公司專案有個日期連動的 scroll 優化試驗，原先是監聽 scroll。"}}},{"node":{"frontmatter":{"path":"blog/20210110","title":"Pop Quiz","tags":["javascript"],"excerpt":"記錄踩到的陷阱題。"}}},{"node":{"frontmatter":{"path":"blog/20190907","title":"GraphQL & Apollo Client","tags":["apollo"],"excerpt":"簡單介紹 React Client 端如何用 Apollo 對 GraphQL Server 做資料存取操作。"}}},{"node":{"frontmatter":{"path":"blog/20200518","title":"常用 NoSQL 雲端資料庫 - Part 1 MongoDB","tags":["mongodb"],"excerpt":"簡介 Relational/NoSQL database、mongoose ORM 寫 mongo CRUD API。"}}},{"node":{"frontmatter":{"path":"blog/20191125","title":"初探 RxJS（下）","tags":["rxjs"],"excerpt":"簡介上次未完的 RxJS 剩餘角色，和介紹目前公司後台專案使用的 redux-observable。"}}},{"node":{"frontmatter":{"path":"blog/20190906-2","title":"React Hooks - useCallback, useMemo, useRef","tags":["reactjs"],"excerpt":"JavaScript 是單執行緒、單線程的程式語言，所有的程式碼片段都會在堆疊中被執行，Web worker 相當於可讓主線程開其他 thread。"}}},{"node":{"frontmatter":{"path":"blog/20210109","title":"Response Set-Cookie 無效","tags":["apollo"],"excerpt":"記錄個之前在和同事們弄 Side project 時犯蠢遇到的問題與解決方式。"}}},{"node":{"frontmatter":{"path":"blog/20191017","title":"初探 RxJS（上）","tags":["rxjs"],"excerpt":"簡介相關的設計模式中的 Behavioral Pattern，再介紹 RxJS（先講 Observable）"}}},{"node":{"frontmatter":{"path":"blog/20200527","title":"常用 NoSQL 雲端資料庫 - Part 2 Firebase","tags":["firebase"],"excerpt":"簡介 Google 提供的後端服務平臺（BaaS）中的兩種 DB，realtime database 和 cloud firestore。"}}},{"node":{"frontmatter":{"path":"blog/20200630","title":"Express - Authentication, Authorization and Security","tags":["security","express"],"excerpt":"簡介 Express RESTful API Server 範例中 JWT 權限、授權相關。"}}},{"node":{"frontmatter":{"path":"blog/20200910","title":"Apollo Server 入門篇","tags":["apollo"],"excerpt":"快速複習去年分享的 GraphQL Schema 和 Client query 語法，並簡介如何以 Apollo Server 建立 GraphQL Server。"}}},{"node":{"frontmatter":{"path":"blog/20190909","title":"Prisma - Schema, Data Model, Relations, Client","tags":["prisma"],"excerpt":"未來 Side project 可能會應用到的 SDL first 開發流程角度，簡介此可以取代傳統 ORM 的 DB toolkit。"}}}]}},"pageContext":{"postPath":"blog/20190906","translations":[{"hreflang":"en","path":"/blog/20190906"}]}}}