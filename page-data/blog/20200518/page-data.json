{"componentChunkName":"component---src-templates-post-post-jsx","path":"/blog/20200518","result":{"data":{"markdownRemark":{"html":"<h2>Relational Database &#x26; NoSQL Database</h2>\n<ul>\n<li>\n<p>Relational database：<br>\n傳統 db 大多都是，資料是以一或多個資料表方式存放，並以 SQL 操作。<br>\n資料庫正規化非常重要，避免系統儲存空間上的浪費、增加效能，其中最有名的就是第一(1NF)到第三正規化(3NF)</p>\n<ul>\n<li><a href=\"https://progressbar.tw/posts/265\" target=\"_blank\" rel=\"nofollow\">1NF</a>：定義主鍵值（primary key / unique key）、剔除重複資料</li>\n<li><a href=\"https://progressbar.tw/posts/267\" target=\"_blank\" rel=\"nofollow\">2NF</a>：拆 Table 透過 primary key 主鍵(PK) / foreign key 外鍵(FK) 關聯 * <a href=\"https://progressbar.tw/posts/270\" target=\"_blank\" rel=\"nofollow\">3NF</a>：每一個非鍵值欄位都不得與其他非鍵值欄位具相關性</li>\n</ul>\n</li>\n<li>\n<p>NoSQL（Not Only SQL）：<br>\n對不同於傳統的關聯式資料庫的資料庫管理系統的統稱。<br>\n適合行動、Web、遊戲等需要彈性、可擴展性、高效能和高功能資料庫的新型應用程式。</p>\n<ul>\n<li><a href=\"https://aws.amazon.com/tw/nosql/\" target=\"_blank\" rel=\"nofollow\">看看 AWS 的 NoSQL 解說</a></li>\n<li>由於 NoSQL 的種類很多，而技術的成熟度與使用場景不一，目前業界還是以 SQL 資料庫佔大多數 (SQL：Structured Query Language)</li>\n</ul>\n</li>\n<li>\n<p><img src=\"https://i.imgur.com/eIqC7x5.png\"> <br><br></p>\n<table>\n<thead>\n<tr>\n<th>Tranditional</th>\n<th>NoSQL-文件資料模型(MongoDB)為例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Table</td>\n<td>Collection</td>\n</tr>\n<tr>\n<td>Row</td>\n<td>Document</td>\n</tr>\n<tr>\n<td>Column</td>\n<td>Field</td>\n</tr>\n<tr>\n<td>資料可預測且高度結構化的</td>\n<td>資料動態且經常變更的</td>\n</tr>\n<tr>\n<td>需要撰寫安全性</td>\n<td>需要快速寫入和寫入安全性並不重要</td>\n</tr>\n<tr>\n<td>可以使用複雜的查詢和報表</td>\n<td>資料抓取很簡單</td>\n</tr>\n<tr>\n<td>Queries 需要 join table 較耗時</td>\n<td>Queries 較高效</td>\n</tr>\n<tr>\n<td>使用者更集中</td>\n<td>資料需要寬地理分佈</td>\n</tr>\n<tr>\n<td>應用程式將會部署到大型的高階硬體</td>\n<td>應用程式將會部署至商用硬體，例如使用公用雲端</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>2019 stackoverflow 統計\n<a href=\"https://insights.stackoverflow.com/survey/2019#technology-_-databases\" target=\"_blank\" rel=\"nofollow\"><img src=\"https://i.imgur.com/JGWfO5A.png\"></a>\nTop SQL Database Alternatives for 2020:<br>\n<img src=\"https://i.imgur.com/7Nvc5Nd.png\"><br>\nTop NoSQL Database Alternatives for 2020:<br>\n<img src=\"https://i.imgur.com/qIJhdVb.png\"></li>\n<li>\n<p>OMD / ORM 使可以不用資料庫管理系統的原生語言對資料庫資料進行操作，依不同的資料庫類型，分別使用不同的映射技術，讓開發者可以使用物件導向語法來操作資料庫，增加程式碼的易讀性與維護性（但也有開發者們認為直接用原生語言（如 SQL）才能確保操作時的效率與準確）</p>\n<ul>\n<li>文件資料庫：ODM (Object Document Mapper) ex. Mongoose for Mongo</li>\n<li>關聯式資料庫：ORM (Object Relational Mapping) ex. LINQ to SQL</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2>Firebase vs MongoDB</h2>\n<p>前端能快速上手的後端 api 串接相關可能會想到 <a href=\"https://tpu.thinkpower.com.tw/tpu/articleDetails/1327\" target=\"_blank\" rel=\"nofollow\">JSON Server</a>、Firebase、MongoDB...<br>\n這邊想做個 Firebase 和 MongoDB 的比較</p>\n<h3>Firebase</h3>\n<p>Firebase 是 Google 的 realtime app platform，提供完整的 solution 供適合需要及時性、跨裝置、離線支持的應用快速構建<br>\nFirebase 與 Google Cloud Platform (GCP) 共用三款產品：<a href=\"https://firebase.google.com/products/firestore?hl=zh-cn\" target=\"_blank\" rel=\"nofollow\">Cloud Firestore</a>、Cloud Functions、Cloud Storage，通過 Firebase 向開發者開放</p>\n<p><a href=\"https://firebase.google.com/firebase-and-gcp?hl=zh-cn\" target=\"_blank\" rel=\"nofollow\">Firebase vs Google Cloud Platform (GCP)</a></p>\n<h3>MongoDB</h3>\n<p>MongoDB Inc 開源的 NoSQL document database，依 query 需求提供彈性和可擴展性</p>\n<p><img src=\"https://i.imgur.com/YySgrSt.png\"></p>\n<h3>References</h3>\n<p><a href=\"https://www.excellentwebworld.com/mongodb-vs-firebase/\" target=\"_blank\" rel=\"nofollow\">Firebase Vs MongoDB : Battle Of The Best Databases For 2020</a> - 有很多比較很詳盡</p>\n<hr>\n<h3><a href=\"https://docs.mongodb.com/guides/\" target=\"_blank\" rel=\"nofollow\">MongoDB</a></h3>\n<ul>\n<li>\n<p>Node.js 通常搭配 MongoDB 使用，<a href=\"https://mongoosejs.com/docs/\" target=\"_blank\" rel=\"nofollow\">Mongoose</a> 提供了非常方便的介面操作 mongoDB (ODM)，而且 MongoDB 有提供免費的雲端資料庫服務 MongoDB Atlas</p>\n<ul>\n<li><a href=\"https://www.inside.com.tw/article/17763-MongoDB\" target=\"_blank\" rel=\"nofollow\">17 Media</a> 資料也是運行在 MongoDB Atlas</li>\n</ul>\n</li>\n<li>\n<p>MongoDB 特性：</p>\n<ul>\n<li>Document based: field-value pair data structures</li>\n<li>Scalable</li>\n<li>Flexible: No document schema required</li>\n<li>Performant</li>\n<li>Free and open source</li>\n</ul>\n</li>\n<li>下載 <a href=\"https://www.mongodb.com/products/compass\" target=\"_blank\" rel=\"nofollow\">MongoDB Compass</a>: The GUI for MongoDB</li>\n<li>註冊 <a href=\"https://www.mongodb.com/cloud/atlas/lp/try2?utm_source=google&#x26;utm_campaign=gs_apac_taiwan_search_brand_atlas_desktop&#x26;utm_term=mongodb&#x26;utm_medium=cpc_paid_search&#x26;utm_ad=e&#x26;gclid=CjwKCAjwwMn1BRAUEiwAZ_jnEiTCp46TXTdSXzZdp3AvymAShg1KRANkrJCuQTqVhQyXmZ-G_DzZ6RoCTkQQAvD_BwE\" target=\"_blank\" rel=\"nofollow\">MongoDB Atlas</a>: Cloud-hosted MongoDB service on AWS, Azure and Google Cloud</li>\n<li>mongoDB 在建立每個文件的時候會預設建立 _id 屬性作為文件的唯一標識</li>\n</ul>\n<h3>建制/啟動本地 MongoDB（先略過有興趣再自己看）</h3>\n<p><a href=\"https://www.mongodb.com/download-center/community\" target=\"_blank\" rel=\"nofollow\">Download MongoDB</a></p>\n<ul>\n<li>\n<p>將下載包 bin 底下 cp 到 <code>/usr/local/bin</code> 下，在 <code>/usr/local/bin</code></p>\n<ul>\n<li><code>sudo mkdir /data/db</code></li>\n<li><code>sudo chown -R</code>id -un<code>/data/db</code></li>\n<li><code>mongod</code> 啟動 mongo db server</li>\n<li>啟動後再開個 terminal tab\n<code>mongo</code> 進入後就可直接操作資料了；<code>quit()</code> 則跳出。以下一點較常用的方法/例子</li>\n<li><code>use XXX</code> 切換/建 db</li>\n<li><code>db.XXX.insertOne({...})</code> 在 XXXcolection 中插入一筆</li>\n<li><code>db.XXX.insertMany([{...},{...},...])</code> 在 XXXcolection 中插入一筆</li>\n<li><code>db.XXX.find()</code> 檢視 collection 下資料</li>\n<li>\n<p><code>db.XXX.find({key: value/operator})</code> 檢視 collection 下符合條件資料</p>\n<ul>\n<li><code>db.tours.find({rating: 4.7})</code></li>\n<li><code>db.tours.find({price: {$lte: 300}})</code></li>\n<li><code>db.tours.find({price: {$lt: 300}, rating: {$gte: 4.7}})</code></li>\n<li><code>db.tours.find({$or: [{price: {$lt: 300}}, {rating: {$gte: 4.7}}]})</code></li>\n</ul>\n</li>\n<li><code>db.tours.updateOne({\"name\":\"The Sea Hiker\"}, {$set: {\"price\": 999}})</code></li>\n<li><code>db.tours.updateMany({price: {$lt: 300}, rating: {$gte: 4.7}}, {$set: {premius: true}})</code></li>\n<li><code>db.tours.deleteMany([])</code></li>\n<li><code>show dbs</code> 看所有 db</li>\n<li><code>show collections</code> 看該 db 下的所有 collections</li>\n<li><code>quit()</code></li>\n</ul>\n</li>\n</ul>\n<h3>今日小練習：用 Mongoose 寫 CRUD API</h3>\n<ul>\n<li>\n<p>MongoDB GUI（可跳過）：使用 MongoDB Compass 連至雲端 MongoDB Atlas 的 Cluster</p>\n<ol>\n<li>MongoDB Atlas 上創建 free Cluster\n並 在 Network Access 加入當前 IP 至白名單、Database Access 添加使用者（記好 password，等等還要設在 env 變數）<br>\nCluster → Overview → connect → 複製修改 connection string<br>\n<code>mongodb+srv://tiffany:&#x3C;password>@cluster0-tetlw.mongodb.net/test</code><br>\n就可以使用 GUI 連看了<br>\n<img src=\"https://i.imgur.com/Pmx8P6P.png\"><br>\n<img src=\"https://i.imgur.com/H1wgawX.png\"><br>\n<img src=\"https://i.imgur.com/zpqN5pn.png\"></li>\n</ol>\n</li>\n<li><a href=\"https://expressjs.com/zh-tw/\" target=\"_blank\" rel=\"nofollow\">Express</a>：快速、集思廣益、極簡的 Node.js Web 架構</li>\n<li><a href=\"https://mongoosejs.com/docs/\" target=\"_blank\" rel=\"nofollow\">Mongoose</a> 是給 MongoDB, Node.js 的 ODM（Object Data Modeling）套件，可以讓我們更方便處理 CRUD</li>\n</ul>\n<h4>直接開啟專案吧</h4>\n<blockquote>\n<p>寫個 user 的 restful api\n先 clone 專案 <a href=\"https://github.com/YuLinChen83/node-mongoose-practice\" target=\"_blank\" rel=\"nofollow\">https://github.com/YuLinChen83/node-mongoose-practice</a></p>\n</blockquote>\n<ol>\n<li>\n<p>在 atlas 上創建 backstage DB 和 空的 users collection<br>\n<img src=\"https://i.imgur.com/9mtS9s6.png\"><br>\n並複製連線字串，例：<br>\n<code>DATABASE=mongodb+srv://tiffany:&#x3C;password>@cluster0-tetlw.mongodb.net/test?retryWrites=true&#x26;w=majority</code><br>\n回到專案創 <code>config.env</code> 設置參數<br>\n注意：<code>test</code> 要改成 db name、<code>&#x3C;password></code> 要被 <code>DATABASE_PASSWORD</code> 取代 (<code>DATABASE_PASSWORD=剛剛記的使用者密碼</code>)</p>\n<ul>\n<li>\n<p><code>config.env</code></p>\n<deckgo-highlight-code   terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"undefined\">\n          <code slot=\"code\">NODE_ENV=development\nPORT=3000\nDATABASE=mongodb+srv://tiffany:&lt;PASSWORD&gt;@cluster0-tetlw.mongodb.net/backstage?retryWrites=true&amp;w=majority\nDATABASE_LOCAL=mongodb://localhost:27017/backstage\nDATABASE_PASSWORD=P1IpkV56tAMcaOpO</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code>server.js</code> connect db</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">const DB = process.env.DATABASE.replace(&#39;&lt;PASSWORD&gt;&#39;, process.env.DATABASE_PASSWORD);\nmongoose\n.connect(DB, {\n useUnifiedTopology: true,\n useNewUrlParser: true,\n})\n.then(() =&gt; console.log(&#39;DB connection successful!&#39;))\n.catch((err) =&gt; {\n console.log(`DB connection error: ${err.message}`);\n});</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n</li>\n<li>\n<p>定義 api route<br>\n→ 專案 steps branch 的 step1 commit</p>\n<ul>\n<li>RESTful API 是符合 REST (Representational State Transfer) 風格的 API 撰寫方式<br>\n⌑ Uniform interface<br>\n⌑ Stateless<br>\n⌑ Client-server<br>\n⌑ Cachable<br>\n⌑ Layered System<br>\n⌑ Code on demand (Optional)</li>\n<li>使用 HTTP Method\n⌑ POST：新增<br>\n⌑ GET：讀取<br>\n⌑ PUT：修改（修改整份文件）<br>\n⌑ PATCH：修改（修改其中幾個欄位）<br>\n⌑ DELETE：刪除<br>\n可以先 start 啟動並請求 API 看看</li>\n</ul>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">import express from &#39;express&#39;;\n\nconst app = express();\napp\n  .route(&#39;/api/users&#39;)\n  .get(getAllUsers)\n  .post(createUser);\n\napp\n  .route(&#39;/api/users/:id&#39;)\n  .get(getUser)\n  .patch(updateUser)\n  .delete(deleteUser);\n\nexport default app;</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>refactor structure、定義 userSchema 新增 Model<br>\n→ 專案 steps branch 的 step2 commit<br>\n⌑ <code>/models</code> 創建 Model，在這邊定義 Schema 後 export 實例<br>\n⌑ <code>/controllers</code> 依據資料定義對 Model 做資料操作的方法<br>\n⌑ <code>/routes</code> 定義 restful api 對應 controller 內的方法</p>\n<ul>\n<li>Schema <a href=\"https://mongoosejs.com/docs/validation.html\" target=\"_blank\" rel=\"nofollow\">Validation</a>，定義 document <a href=\"https://mongoosejs.com/docs/schematypes.html\" target=\"_blank\" rel=\"nofollow\">資料型別</a></li>\n<li>\n<p>內建 validators</p>\n<ul>\n<li>required</li>\n<li>min, max (for Numbers)</li>\n<li>enum, match, minlength, maxlength (for Strings)</li>\n</ul>\n</li>\n<li>unique 不是 validator，但在這邊用來限制 field 值不重複</li>\n<li>創建 model 並 export\nA model is a class with which we construct documents.</li>\n</ul>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">import { Schema, model } from &#39;mongoose&#39;;\n\nconst userSchema = new Schema({\n  account: {\n    type: String,\n    unique: true,\n    required: true,\n  },\n  password: {\n    type: String,\n    required: true,\n  },\n  name: {\n    type: String,\n    required: true,\n  },\n  age: Number,\n  description: String,\n  birthday: Date,\n  createdAt: {\n    type: Date,\n    default: Date.now(),\n    select: false,\n  },\n});\n\nconst User = model(&#39;User&#39;, userSchema);\n\nexport default User;</code>\n        </deckgo-highlight-code>\n</li>\n<li>Controller CRUD\n→ 專案 steps branch step3 commit 之後\n速覽 <a href=\"https://mongoosejs.com/docs/queries.html\" target=\"_blank\" rel=\"nofollow\">Mongoose Queries</a>，兩種執行法：第二參數 callback function 或作為 promise 使用<br>\n⌑ <code>Model.deleteMany()</code><br>\n⌑ <code>Model.deleteOne()</code><br>\n⌑ <code>Model.find()</code><br>\n⌑ <code>Model.findById()</code><br>\n⌑ <a href=\"https://mongoosejs.com/docs/api.html#model_Model.findByIdAndRemove\" target=\"_blank\" rel=\"nofollow\"><code>Model.findByIdAndDelete()</code></a><br>\n⌑ <code>Model.findByIdAndRemove()</code><br>\n⌑ <a href=\"https://mongoosejs.com/docs/api.html#model_Model.findByIdAndUpdate\" target=\"_blank\" rel=\"nofollow\"><code>Model.findByIdAndUpdate()</code></a><br>\n⌑ <code>Model.findOne()</code><br>\n⌑ <code>Model.findOneAndDelete()</code><br>\n⌑ <code>Model.findOneAndRemove()</code><br>\n⌑ <code>Model.findOneAndReplace()</code><br>\n⌑ <code>Model.findOneAndUpdate()</code><br>\n⌑ <code>Model.replaceOne()</code><br>\n⌑ <code>Model.updateMany()</code><br>\n⌑ <code>Model.updateOne()</code></li>\n</ol>\n<p>想深入了解可詳閱 <a href=\"https://docs.mongodb.com/manual/introduction/\" target=\"_blank\" rel=\"nofollow\">mongodb document</a></p>\n<ul>\n<li>MongoDB 還有很方便產分析數據的 <a href=\"https://docs.mongodb.com/manual/reference/operator/aggregation/\" target=\"_blank\" rel=\"nofollow\">aggregation 用法</a>，提供眾多 operator 可以實現複雜的分群分析，Mongoose 也能使用</li>\n<li>Mongoose 提供四種 middleware，document、query、aggregate、model</li>\n<li>Swagger 是一個工具讓你的 API 可以更視覺化被呈現</li>\n</ul>\n<p>下集待續(?)</p>\n<p>Firebase, Redis, Elasticsearch... etc.</p>","timeToRead":9,"frontmatter":{"title":"常用 NoSQL 雲端資料庫 - Part 1 MongoDB","date":"18 May 2020","tags":["mongodb"],"path":"blog/20200518","excerpt":"簡介 Relational/NoSQL database、mongoose ORM 寫 mongo CRUD API。"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"path":"blog/20210110","title":"Pop Quiz","tags":["javascript"],"excerpt":"記錄踩到的陷阱題。"}}},{"node":{"frontmatter":{"path":"blog/20210109-3","title":"REST / RESTful & HTTP Methods","tags":["javascript"],"excerpt":"簡易整理。"}}},{"node":{"frontmatter":{"path":"blog/20191107","title":"Javascript Event loop - macro task & micro task","tags":["javascript"],"excerpt":"介紹 Event loop 容易混淆的異步任務 macro task & micro task。"}}},{"node":{"frontmatter":{"path":"blog/20210109","title":"Response Set-Cookie 無效","tags":["apollo"],"excerpt":"記錄個之前在和同事們弄 Side project 時犯蠢遇到的問題與解決方式。"}}},{"node":{"frontmatter":{"path":"blog/20180521","title":"Web 常見攻擊手法","tags":["security"],"excerpt":"擁有基本的資安觀念保護好自家資料和 user 使用環境是開發人員重要的一點。"}}},{"node":{"frontmatter":{"path":"blog/20190707","title":"JavaScript HTML5 Web Worker & CRA 使用踩雷","tags":["javascript"],"excerpt":"JavaScript 是單執行緒、單線程的程式語言，所有的程式碼片段都會在堆疊中被執行，Web worker 相當於可讓主線程開其他 thread。"}}},{"node":{"frontmatter":{"path":"blog/20180514","title":"JavaScript 中 this 指向","tags":["javascript"],"excerpt":"簡介 this 指向的六種情況。"}}},{"node":{"frontmatter":{"path":"blog/20190108","title":"JavaScript 認識非同步 Callback, Promise, async/await","tags":["javascript"],"excerpt":"Asynchronous 非同步的不同寫法的整理筆記。"}}},{"node":{"frontmatter":{"path":"blog/20170728","title":"WebForm 註冊 JavaScript","tags":["asp.net","javascript"],"excerpt":"動態產生JS在目前公司專案中是滿常用到的小技巧，不同的用法會產生在Web Page 的不同位置而有直譯式語言的前後順序差。"}}},{"node":{"frontmatter":{"path":"blog/20170714","title":"WebForm 使用 reCAPTCHA 驗證","tags":["asp.net"],"excerpt":"這個我不是機器人驗證一定不陌生，滿多登入畫面會看到的，剛好今天接到把圖形驗證改為 reCAPTCHA 就順手記下。"}}},{"node":{"frontmatter":{"path":"blog/20170604","title":"Web App 推播通知","tags":["asp.net"],"excerpt":"隨著行動和穿載裝置的興起，推播通知 (Push Notification) 成為維繫App用戶關係相當有力的工具"}}},{"node":{"frontmatter":{"path":"blog/20190906","title":"初探 Storybook","tags":["javascript"],"excerpt":"初探這款能夠在開發前端元件或是函式庫的同時，可以快速地建立元件各種操作模式或是樣式的工具。"}}},{"node":{"frontmatter":{"path":"blog/20170421","title":"存取遠端 EventLog","tags":["asp.net","javascript"],"excerpt":"在公司中實作一個 Event log 的查詢工具。（之後來寫了 D3 呈現查詢異常查詢的部分）"}}},{"node":{"frontmatter":{"path":"blog/20170508","title":"WebForm 圖片上傳檢查","tags":["asp.net"],"excerpt":"開放上傳有可能被傳奇怪東西的風險，只檢查所看到的副檔名，謹慎來說似乎是不夠的。"}}},{"node":{"frontmatter":{"path":"blog/20210109-2","title":"IntersectionObserver","tags":["javascript"],"excerpt":"公司專案有個日期連動的 scroll 優化試驗，原先是監聽 scroll。"}}},{"node":{"frontmatter":{"path":"blog/20191125","title":"初探 RxJS（下）","tags":["rxjs"],"excerpt":"簡介上次未完的 RxJS 剩餘角色，和介紹目前公司後台專案使用的 redux-observable。"}}},{"node":{"frontmatter":{"path":"blog/20200630","title":"Express - Authentication, Authorization and Security","tags":["security","express"],"excerpt":"簡介 Express RESTful API Server 範例中 JWT 權限、授權相關。"}}},{"node":{"frontmatter":{"path":"blog/20200910","title":"Apollo Server 入門篇","tags":["apollo"],"excerpt":"快速複習去年分享的 GraphQL Schema 和 Client query 語法，並簡介如何以 Apollo Server 建立 GraphQL Server。"}}},{"node":{"frontmatter":{"path":"blog/20200527","title":"常用 NoSQL 雲端資料庫 - Part 2 Firebase","tags":["firebase"],"excerpt":"簡介 Google 提供的後端服務平臺（BaaS）中的兩種 DB，realtime database 和 cloud firestore。"}}},{"node":{"frontmatter":{"path":"blog/20190906-2","title":"React Hooks - useCallback, useMemo, useRef","tags":["reactjs"],"excerpt":"JavaScript 是單執行緒、單線程的程式語言，所有的程式碼片段都會在堆疊中被執行，Web worker 相當於可讓主線程開其他 thread。"}}},{"node":{"frontmatter":{"path":"blog/20190907","title":"GraphQL & Apollo Client","tags":["apollo"],"excerpt":"簡單介紹 React Client 端如何用 Apollo 對 GraphQL Server 做資料存取操作。"}}},{"node":{"frontmatter":{"path":"blog/20191017","title":"初探 RxJS（上）","tags":["rxjs"],"excerpt":"簡介相關的設計模式中的 Behavioral Pattern，再介紹 RxJS（先講 Observable）"}}},{"node":{"frontmatter":{"path":"blog/20190909","title":"Prisma - Schema, Data Model, Relations, Client","tags":["prisma"],"excerpt":"未來 Side project 可能會應用到的 SDL first 開發流程角度，簡介此可以取代傳統 ORM 的 DB toolkit。"}}}]}},"pageContext":{"postPath":"blog/20200518","translations":[{"hreflang":"en","path":"/blog/20200518"}]}},"staticQueryHashes":["4097791827"]}