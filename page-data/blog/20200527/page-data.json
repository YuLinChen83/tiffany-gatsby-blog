{"componentChunkName":"component---src-templates-post-post-jsx","path":"/blog/20200527","result":{"data":{"markdownRemark":{"html":"<p><a href=\"https://hackmd.io/@Z4tcvPvzQ5OeHajRP1rAiQ/S1Z1GPqiI/https%3A%2F%2Fhackmd.io%2F%40Z4tcvPvzQ5OeHajRP1rAiQ%2Fr1-4VmriL\" target=\"_blank\" rel=\"nofollow\">HackMD</a></p>\n<h1><a href=\"https://firebase.google.com/docs/web/setup\" target=\"_blank\" rel=\"nofollow\">Firebase</a></h1>\n<p>Firebase 是為行動應用開發者所提供的後端服務平臺（Backend as a Services，BaaS）<br>\n可以讓前端人員在雲端快速建置後端服務，專注在前端</p>\n<blockquote>\n<p>Firebase 在 2014 年被納入 Google 旗下，主力支援開發、分析功能</p>\n</blockquote>\n<div class=\"alert-info\">\nBaaS 提供的最常見的服務包括推送通知、文件存儲和共享、與社交網絡（如Facebook和Twitter）的集成、位置服務、資料庫持久性和查詢、消息傳遞和聊天功能、用戶管理、運行業務邏輯和使用分析工具...etc.\n</div>\n![](https://i.imgur.com/hYTMmmT.png)  \nFirebase 新增完專案進入可看到目錄開發的部分如上\n* Authentication 身份驗證\n* Database 資料庫\n* Storage 儲存：圖片影片等 media assets\n* Hosting 託管：靜態網站部署功能\n* Functions 開發和管理 server side 功能\n* ML Kit 機器學習相關服務\n<blockquote>\n<p>此次重點為 firebase 的 database，不過還是會提到一點點常用的服務</p>\n</blockquote>\n<p><a href=\"https://firebase.google.com/\" target=\"_blank\" rel=\"nofollow\">先前往 firebase console 新增專案並創 Web application 吧</a> 🐱<br>\n<img src=\"https://i.imgur.com/L69ION0.png\"></p>\n<ul>\n<li>\n<p><code>npm i firebase</code>\ncreate firebase utils js</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">import firebase from &#39;firebase/app&#39;;\nimport &#39;firebase/auth&#39;;\nimport &#39;firebase/database&#39;;\nimport &#39;firebase/storage&#39;;\n\n// config 可以在專案總覽&gt;專案設定下找到\nconst config = {\napiKey: &#39;...&#39;,\nauthDomain: &#39;vuechatroom-b8368.firebaseapp.com&#39;,\ndatabaseURL: &#39;https://vuechatroom-b8368.firebaseio.com&#39;,\nprojectId: &#39;vuechatroom-b8368&#39;,\nstorageBucket: &#39;vuechatroom-b8368.appspot.com&#39;,\nmessagingSenderId: &#39;908937200350&#39;,\nappId: &#39;1:908937200350:web:83c3b9b2fb2e664f85784f&#39;,\n};\nfirebase.initializeApp(config);\n\n// 看要用到什麼功能 export 實例\n// export const auth = firebase.auth();\n// export const db = firebase.database();\n// export const firestore = firebase.firestore();\n// export const storage = firebase.storage();</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<h2>Database</h2>\n<ul>\n<li>分成 Cloud Firestore 和 Realtime Database 兩種 realtime updated NoSQL db</li>\n<li>\n<p><a href=\"https://firebase.google.com/docs/database/rtdb-vs-firestore\" target=\"_blank\" rel=\"nofollow\">Choose a Database: Cloud Firestore or Realtime Database</a></p>\n<ul>\n<li>兩者皆</li>\n<li>不需部署、維護 server</li>\n<li>Realtime updates</li>\n<li><a href=\"https://firebase.google.com/pricing\" target=\"_blank\" rel=\"nofollow\">免費配額</a></li>\n<li>可同時使用，但整體資料架構不同，且<strong>資料不互通</strong></li>\n<li>簡易比較</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Realtime database</th>\n<th>Cloud firestore</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>baisc queries (filter, sort 不能同時)</td>\n<td>advanced queries (filter, sort 可以同時)</td>\n</tr>\n<tr>\n<td>basic write/transaction operations</td>\n<td>advanced write/transaction operations</td>\n</tr>\n<tr>\n<td>queries are deep by default</td>\n<td>queries are shallow</td>\n</tr>\n<tr>\n<td>simple json tree</td>\n<td>collections</td>\n</tr>\n<tr>\n<td>queries do not require an index</td>\n<td>queries are indexed by default</td>\n</tr>\n<tr>\n<td>query performance is proportional to the size of your data set</td>\n<td>query performance is proportional to the size of your result set</td>\n</tr>\n<tr>\n<td>hard scale (and need sharding)</td>\n<td>easy scale (automatic)</td>\n</tr>\n<tr>\n<td>presence</td>\n<td>x</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>firebase 沒有 model，但也可以實作一個像 mongodb ORM mongoose 的 Model 功能</li>\n<li>都是先選定 reference 位置再操作上面的值</li>\n</ul>\n<h2>Realtime Database</h2>\n<ul>\n<li>透過 JSON tree <a href=\"https://firebase.google.com/docs/database/web/structure-data\" target=\"_blank\" rel=\"nofollow\">資料格式</a>儲存並即時同步到所連線的用戶端，JSON 應避免巢狀、盡量扁平化</li>\n<li>如果在網路離線時操作會立即寫進 local version database，當再次連上（無關閉視窗）即會同步到 remote database 和其他用戶端</li>\n<li>建立 db 時以測試模式啟動的預設<a href=\"https://firebase.google.com/docs/rules\" target=\"_blank\" rel=\"nofollow\">規則</a>先暫時改為 read, write 皆為 true 後續認證完才有辦法存取\n<img src=\"https://i.imgur.com/BbQlyTg.png\"></li>\n<li>\n<p><a href=\"https://firebase.google.com/docs/database/web/read-and-write\" target=\"_blank\" rel=\"nofollow\">CRUD</a></p>\n<ul>\n<li>Reference: <code>firebase.database().ref('.../...')</code></li>\n<li>Create</li>\n<li>\n<p><code>set()</code> 在任何 reference 位置儲存/複寫資料</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">const writeUserData = (userId, name, email, imageUrl) =&gt; {\ndb.ref(&#39;users/&#39; + userId).set({\n  username: name,\n  email: email,\n  profile_picture: imageUrl,\n});\n};</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code>push()</code> 自動產生一個節點（新 reference）並添加儲存資料</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">const handleSubmit = async (event) =&gt; {\nevent.preventDefault();\ntry {\n  await db.ref(&#39;chats&#39;).push({\n    content: state.content,\n    timestamp: Date.now(),\n    uid: state.user.uid,\n  });\n  // ...\n} catch (error) {\n  // handle error\n}\n};</code>\n        </deckgo-highlight-code>\n</li>\n<li><a href=\"https://firebase.google.com/docs/database/web/read-and-write#listen_for_value_events\" target=\"_blank\" rel=\"nofollow\">Read</a></li>\n<li>\n<p><code>on()</code> or <code>once()</code> 讀取 reference 上的資料並監聽改動獲取 snapshot\n需要 <code>snapshot.val()</code> 取得資料 🔆\n建議 ref 不要太 root 避免 snapshot 太大包</p>\n<ul>\n<li>\n<p><code>on()</code></p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">const starCountRef = db.ref(&#39;posts/&#39; + postId + &#39;/starCount&#39;);\nstarCountRef.on(&#39;value&#39;, (snapshot) =&gt; {\nupdateStarCount(postElement, snapshot.val());\n});</code>\n        </deckgo-highlight-code>\n<p><code>off()</code> 可移除該 reference 上的監聽，但不包含 child 的監聽</p>\n</li>\n<li>\n<p><code>once()</code> 只讀取一次，可初始化用</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">const userId = auth.currentUser.uid;\nreturn db\n.ref(&#39;/users/&#39; + userId)\n.once(&#39;value&#39;)\n.then(function(snapshot) {\nconst username = (snapshot.val() &amp;&amp; snapshot.val().username) || &#39;Anonymous&#39;;\n// ...\n});</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n</li>\n<li>Update</li>\n<li>\n<p><a href=\"https://firebase.google.com/docs/reference/js/firebase.database.Reference#update\" target=\"_blank\" rel=\"nofollow\"><code>update()</code></a>\n更新部分欄位</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">const adaNameRef = db.ref(&#39;users/ada/name&#39;);\n// only changed first, last\nadaNameRef.update({ first: &#39;Ada&#39;, last: &#39;Lovelace&#39; });</code>\n        </deckgo-highlight-code>\n<p>可同時更新多 reference 的 JSON tree（全更新成功不然就全失敗）</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">const writeNewPost = (uid, username, picture, title, body) =&gt; {\nconst postData = {\n  author: username,\n  uid: uid,\n  body: body,\n  title: title,\n  starCount: 0,\n  authorPic: picture,\n};\n\n// 1. Get a key for a new Post.\nconst newPostKey = db\n  .ref()\n  .child(&#39;posts&#39;)\n  .push().key;\n\n// 2. expect simultaneously updated in the posts list and the user&#39;s post list.\nconst updates = {};\nupdates[&#39;/posts/&#39; + newPostKey] = postData;\nupdates[&#39;/user-posts/&#39; + uid + &#39;/&#39; + newPostKey] = postData;\n\nreturn db.ref().update(updates);\n};</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><a href=\"https://firebase.google.com/docs/reference/js/firebase.database.Reference#transaction\" target=\"_blank\" rel=\"nofollow\"><code>transaction()</code></a> 確保更新已存在值時不會因同時操作而衝突\n如果 transaction 中還未 update 完成就又被 set，transaction 會被 set 中斷取消</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">// Try to create a user for ada, but only if the user id &#39;ada&#39; isn&#39;t\n// already taken\nconst adaRef = firebase.database().ref(&#39;users/ada&#39;);\nadaRef.transaction(\nfunction(currentData) {\n  if (currentData === null) {\n    return { name: { first: &#39;Ada&#39;, last: &#39;Lovelace&#39; } };\n  } else {\n    console.log(&#39;User ada already exists.&#39;);\n    return; // Abort the transaction.\n  }\n},\nfunction(error, committed, snapshot) {\n  if (error) {\n    console.log(&#39;Transaction failed abnormally!&#39;, error);\n  } else if (!committed) {\n    console.log(&#39;We aborted the transaction (because ada already exists).&#39;);\n  } else {\n    console.log(&#39;User ada added!&#39;);\n  }\n  console.log(&quot;Ada&#39;s data: &quot;, snapshot.val());\n}\n);</code>\n        </deckgo-highlight-code>\n</li>\n<li>Delete</li>\n<li>call <code>remove()</code> on a reference to the location of that data; <code>set()</code> or <code>update()</code> to null</li>\n<li>\n<p><code>set()</code>, <code>update()</code> 第二參數為 optional completion callback</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">db.ref(&#39;users/&#39; + userId).set({\nusername: name,\nemail: email,\nprofile_picture : imageUrl\n}, (error) =&gt; {\nif (error) {\n  // The write failed...\n} else {\n  // Data saved successfully!\n}\n});\n}</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n</li>\n<li><img src=\"https://i.imgur.com/h2xiser.png\">\n🔖 <a href=\"https://github.com/YuLinChen83/firebase-chatroom.git\" target=\"_blank\" rel=\"nofollow\">Github chatroom example</a></li>\n</ul>\n<h2>Cloud Firestore</h2>\n<ul>\n<li>已經在 2019 年 1 月 31 日脫離 beta 成為 firebase 正式產品，也是官方較推薦的 database</li>\n<li><img src=\"https://i.imgur.com/9PIRABv.png\">\nRoot 為多個 Collection，每個 Collection 可裝載多個 Document，每個 Document 實體中也可包含 Collection</li>\n<li>在集合中創建第一個文檔之後，集合才會存在；如果刪除集合中的所有文檔，集合將不再存在</li>\n<li><a href=\"https://firebase.google.com/docs/firestore/quickstart\" target=\"_blank\" rel=\"nofollow\">Get started with Cloud Firestore</a></li>\n<li>firestore 建 DB、調權限\n<img src=\"https://i.imgur.com/k2EGE1J.jpg\">\n<img src=\"https://i.imgur.com/2G3rVHC.png\">\n<img src=\"https://i.imgur.com/ijeCQC8.png\">\n測試模式的 default 為 30 日後不得讀寫，可在規則改寫權限</li>\n<li>\n<p>Data Types\n<img src=\"https://i.imgur.com/aSujnpH.png\"></p>\n<ul>\n<li>array 的值不能有 array</li>\n<li><a href=\"https://stackoverflow.com/a/47673346\" target=\"_blank\" rel=\"nofollow\">reference</a> 可指定到任何 Document Reference\nExample\nSet a reference on a collection</li>\n</ul>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">let data = {\n  name: &#39;productName&#39;,\n  size: &#39;medium&#39;,\n  userRef: db.doc(&#39;users/&#39; + firebase.auth().currentUser.uid),\n};\ndb.collection(&#39;products&#39;).add(data);</code>\n        </deckgo-highlight-code>\n<p>Get a collection (products) and all references on each document (user details):</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">db.collection(&#39;products&#39;)\n  .get()\n  .then((res) =&gt; {\n    vm.mainListItems = [];\n    res.forEach((doc) =&gt; {\n      let newItem = doc.data();\n      newItem.id = doc.id;\n      if (newItem.userRef) {\n        newItem.userRef\n          .get()\n          .then((res) =&gt; {\n            newItem.userData = res.data();\n            vm.mainListItems.push(newItem);\n          })\n          .catch((err) =&gt; console.error(err));\n      } else {\n        vm.mainListItems.push(newItem);\n      }\n    });\n  })\n  .catch((err) =&gt; {\n    console.error(err);\n  });</code>\n        </deckgo-highlight-code>\n<ul>\n<li>完整的 types 和其 default sort 這邊看 <a href=\"https://firebase.google.com/docs/firestore/manage-data/data-types#data_types\" target=\"_blank\" rel=\"nofollow\">document</a></li>\n<li>firestore 用 indexes 確保 queries 的高效，index 分為 single-field and composite</li>\n<li>\n<p>single-field 為 document 預設建立每個欄位升序和降序的兩個 index（非所有型別的資料欄位像是 map, array）可以高效查詢、排序</p>\n<ul>\n<li>查詢 ex. <code>usersRef.where(\"born\", \"&#x3C;\", 1950)</code></li>\n<li>但 array 可以用 <code>array_contains</code> 來查詢 array 有無包含某值 <code>usersRef.where(\"tags\", \"array_contains\", \"abc\")</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>QueryReference</p>\n<ul>\n<li>\n<p>return two types of objects: (document or collection) references and snapshots.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">const collectionRef = firestore.collection(&#39;collections&#39;);\ncollectionRef.onSnapshot(async (snapshot) =&gt; {\nconst collectionsMap = convertCollectionsSnapshotToMap(snapshot);\nupdateCollections(collectionsMap);\n});</code>\n        </deckgo-highlight-code>\n<p><code>firestore.doc('users/:userId')</code>\ndoc 沒指定的話會指向新位置自動產生 document id\n<code>firestore.collection('/users')</code></p>\n</li>\n</ul>\n</li>\n<li>\n<p>get current reference in firebase database</p>\n<ul>\n<li>documentRef: return documentSnapshot object:\n<code>set()</code>, <code>update()</code>, <code>delete()</code>, <code>get()</code></li>\n<li>\n<p>得到的 snapshot 得知 document 有無存在、id 和一些資訊</p>\n<ul>\n<li><code>.exist</code> return boolean</li>\n<li><code>.data()</code> return JSON object of the document 🔆\n<img src=\"https://i.imgur.com/20j0i4h.png\"></li>\n</ul>\n</li>\n<li>collectionRef: return querySnapshot object\n<code>add()</code>, <code>get()</code></li>\n<li>\n<p>得到的 snapshot 得知 collection 有無 document、底下的 documentsSnapshots、長度</p>\n<ul>\n<li><code>.docs</code></li>\n<li><code>.empty</code></li>\n<li><code>.size</code>\n<img src=\"https://i.imgur.com/fbkkEwd.png\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>CRUD</p>\n<ul>\n<li>Create</li>\n<li>\n<p><code>set()</code> 在任何 reference 位置儲存/複寫\n可以 merge 儲存（第二參數代設定）資料，和 update() 一樣部分更新</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">const bookRef = firestore.doc(&#39;books/1&#39;);\nbookRef.set({ price: 300 }, { merge: true });</code>\n        </deckgo-highlight-code>\n<p>只指定 collection 不指定 doc 的話添加自動生成 id 的 document</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">const bookRef = firestore.collection(&#39;books&#39;).doc();\nbookRef.set({ title: &#39;離開時,以我喜歡的樣子&#39;, price: 500 });</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code>add()</code> 在指定 collection 下添加一筆自動生成 id 的 document</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">const bookRef = firestore.collection(&#39;books&#39;);\nbookRef.add({ title: &#39;我還是會繼續釀梅子酒&#39;, price: 500 });</code>\n        </deckgo-highlight-code>\n</li>\n<li>Read\n可以用 <code>where()</code>, <code>orderBy()</code> 等篩選或排序</li>\n<li>\n<p><code>get()</code></p>\n<ul>\n<li>\n<p>一次性讀取 collection 中的 documents，用 forEach snapShot 取出個別內容（<code>.data()</code> 取得 JSON object）</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">const bookRef = firestore.collection(&#39;books&#39;);\nbookRef.get().then((querySnapshot) =&gt; {\nquerySnapshot.forEach((doc) =&gt; {\nconsole.log(doc.id, doc.data());\n});\n});</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>一次性讀取 document</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">const bookRef = firestore.collection(&#39;books&#39;).doc(&#39;aifdBTTUf0czEl1EgCG2&#39;);\nbookRef.get().then((doc) =&gt; {\nconsole.log(doc.data());\n});</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n</li>\n<li>\n<p><code>onSnapshot()</code> 初始讀取並監聽變化</p>\n<ul>\n<li>\n<p>監聽 collection</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">const bookRef = firestore.collection(&#39;books&#39;);\nbookRef.onSnapshot((querySnapshot) =&gt; {\nquerySnapshot.forEach((doc) =&gt; {\nconsole.log(doc.id, doc.data());\n});\n});</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>監聽 document</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">const bookRef = firestore.collection(&#39;books&#39;).doc(&#39;aifdBTTUf0czEl1EgCG2&#39;);\nbookRef.onSnapshot((doc) =&gt; {\nconsole.log(doc.data());\n});</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n</li>\n<li>\n<p>搭配 <a href=\"https://firebase.google.com/docs/reference/js/firebase.firestore.Query#where\" target=\"_blank\" rel=\"nofollow\">Query</a></p>\n<ul>\n<li>可以用鏈式方式透過 <code>.where()</code>, <code>orderBy()</code>, <code>limit()</code>...等 methods 一次 query 排序或篩選結果資料，用在 ref 後、get/onSnapshot 前</li>\n<li>\n<p><code>where(欄位, 邏輯運算子, 參數值)</code>\n要注意的是要將等式運算符（==）與範圍運算符（&#x3C;、&#x3C;=、>、>=）或 array-contains 子句結合使用，要創建複合索引</p>\n<ul>\n<li>只能對單欄位執行範圍比較（&#x3C;、&#x3C;=、>、>=），== 則不限制</li>\n<li>\n<p>一個複合查詢中最多只能包含一個 array_contains</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">const bookRef = firestore.collection(&#39;books&#39;);\nbookRef\n.where(&#39;price&#39;, &#39;&gt;=&#39;, 300)\n.where(&#39;price&#39;, &#39;&lt;&#39;, 400)\n.onSnapshot((querySnapshot) =&gt; {\nquerySnapshot.forEach((doc) =&gt; {\nconsole.log(doc.id, doc.data());\n});\n});</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n</li>\n<li>\n<p>利用 <code>orderBy(欄位, 'desc'或'asc')</code>, <code>limit(n筆)</code> 取排序後的前幾個 documents</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">const bookRef = firestore.collection(&#39;books&#39;);\nbookRef\n.orderBy(&#39;star&#39;, &#39;desc&#39;)\n.limit(3)\n.onSnapshot((querySnapshot) =&gt; {\n  querySnapshot.forEach((doc) =&gt; {\n    console.log(doc.id, doc.data());\n  });\n});</code>\n        </deckgo-highlight-code>\n</li>\n<li>如果連用時 console 出現 requires an index，可以直接點擊網址自動建立\n<img src=\"https://i.imgur.com/qJljQE0.png\"></li>\n<li>沒有 <code>!=</code> 運算符，得拆成 <code>></code> 和 <code>&#x3C;</code> 實現</li>\n<li>如果要實現 OR 查詢，無現成方式。得為每個 OR 條件創建一個單獨的查詢，並在應用中合併查詢結果</li>\n</ul>\n</li>\n<li>Update</li>\n<li>\n<p><code>update()</code> 指定文件更新部分欄位值</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">const bookRef = firestore.doc(`books/1`);\nbookRef.update({ price: 333 });</code>\n        </deckgo-highlight-code>\n</li>\n<li>Delete</li>\n<li>\n<p><code>delete()</code> 刪除集合或文件</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">const bookRef = firestore.collection(&#39;books&#39;).doc(&#39;1&#39;);\nbookRef.delete();</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>用 <code>update()</code> 刪除文件裡的某欄位</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">const bookRef = firestore.collection(&#39;books&#39;).doc(&#39;aifdBTTUf0czEl1EgCG2&#39;);\nbookRef.update({ title: firebase.firestore.FieldValue.delete() });</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n</li>\n<li>\n<p><code>batch()</code> 可以一次 request 多個 call</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">const addCollectionsAndDocuments = async (collectionKey, objectsToAdd) =&gt; {\nconst collectionRef = firestore.collection(collectionKey);\n\nconst batch = firestore.batch();\nobjectsToAdd.forEach((obj) =&gt; {\n  const newDocRef = collectionRef.doc();\n  batch.set(newDocRef, obj);\n});\nreturn await batch.commit();\n};</code>\n        </deckgo-highlight-code>\n</li>\n<li><img src=\"https://i.imgur.com/c3XcMhO.png\">\n🔖 <a href=\"https://github.com/YuLinChen83/shop.git\" target=\"_blank\" rel=\"nofollow\">Github shop example</a>\n🔖 <a href=\"https://github.com/YuLinChen83/vue-blog.git\" target=\"_blank\" rel=\"nofollow\">Github vue-blog example</a></li>\n</ul>\n<h3>心得(?)</h3>\n<p>firebase 是個很自動化的 server 服務，提供多元化又不需要自己實踐那些功能的邏輯，得以專注在前端開發，方便快速</p>\n<hr>\n<h2>補充</h2>\n<h2>Authentication</h2>\n<p>可以直接透過 firebase 做多種第三方認證登入，登入狀態持續到 <code>auth.signOut()</code></p>\n<blockquote>\n<p>不用保管帳密、不需要自己刻 OAuth 的協定，降低複雜度 👍</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/0OBVRxz.png\"></p>\n<ul>\n<li>\n<p>開啟 Email/Password 認證\n圖解 &#x26; 說明\n<img src=\"https://i.imgur.com/Qfs21YZ.png\"></p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">// 註冊\ntry {\nconst { user } = await auth.createUserWithEmailAndPassword(email, password);\n// ...\n} catch (error) {\nconsole.error(error);\n}\n\n// 登入\nawait auth.signInWithEmailAndPassword(email, password);</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>開啟 google 認證\n圖解 &#x26; 說明\n<img src=\"https://i.imgur.com/ytIO1No.png\"></p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">export const signInWithGoogle = () =&gt; {\nconst provider = new firebase.auth.GoogleAuthProvider();\nreturn auth.signInWithPopup(provider);\n};</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>開啟 <a href=\"https://firebase.google.com/docs/auth/web/github-auth\" target=\"_blank\" rel=\"nofollow\">github 認證</a>（<a href=\"https://github.com/settings/applications/new\" target=\"_blank\" rel=\"nofollow\">要先去註冊</a>）\n圖解 &#x26; 說明\n<img src=\"https://i.imgur.com/cU4kVdH.png\">\n<img src=\"https://i.imgur.com/BSPjQLj.png\"></p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">export const signInWithGitHub = () =&gt; {\nconst provider = new firebase.auth.GithubAuthProvider();\nreturn auth.signInWithPopup(provider);\n};</code>\n        </deckgo-highlight-code>\n</li>\n<li>開啟 <a href=\"https://firebase.google.com/docs/auth/web/facebook-login\" target=\"_blank\" rel=\"nofollow\">Facebook 認證</a>（<a href=\"https://developers.facebook.com/apps/\" target=\"_blank\" rel=\"nofollow\">要先去註冊</a>）\n圖解 &#x26; 說明\n<img src=\"https://i.imgur.com/BRZy0Hm.png\">\n<img src=\"https://i.imgur.com/x4YLRFo.png\">\n<img src=\"https://i.imgur.com/HcKtzad.png\">\n但實際試了不行，發現應該是我還沒個人驗證的部分 ⋯⋯ 可能得等些時候再驗證完試試\n<img src=\"https://i.imgur.com/fnEW92I.png\"></li>\n<li>\n<p><code>firebase.auth().onAuthStateChanged</code></p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">auth.onAuthStateChanged((userAuth) =&gt; {\nif (userAuth) {\n  // set authenticated true\n  // userAuth 比較常用應該就 displayName, email, uid\n} else {\n  // set authenticated false\n}\n});</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<h2>Storage</h2>\n<p>創建預設是需登入才有權限上傳\n<img src=\"https://i.imgur.com/tsBqv5V.png\">\n創建完一樣可以在 Rules 先把 <code>allow read, write: if request.auth != null;</code> 改為 <code>allow read, write: if true;</code></p>\n<h3>Upload</h3>\n<ul>\n<li>\n<p><code>put(檔案)</code> 上傳\n<code>on(process callback, fail callback, success callback)</code> 監聽上傳的變動</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">// firebase.js\nexport const storage = firebase.storage();</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code   terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"undefined\">\n          <code slot=\"code\">&lt;input type=&quot;file&quot; id=&quot;uploadBtn&quot; onChange={handleUpload} /&gt;\n{imageAsUrl.imgUrl ? &lt;img src={imageAsUrl.imgUrl} alt=&quot;upload&quot; /&gt; : null}</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  highlight-lines=\"\">\n          <code slot=\"code\">const handleUpload = (event) =&gt; {\nconst imageAsFile = event.target.files[0];\nconst uploadTask = storage.ref(`/images/${imageAsFile.name}`).put(imageAsFile);\nuploadTask.on(\n  &#39;state_changed&#39;,\n  (snapShot) =&gt; {\n    //takes a snap shot of the process as it is happening\n    console.log(snapShot);\n    let uploadValue = (snapShot.bytesTransferred / snapShot.totalBytes) * 100;\n    console.log(uploadValue);\n  },\n  (err) =&gt; {\n    //catches the errors\n    console.log(err);\n  },\n  () =&gt; {\n    // gets the functions from storage refences the image storage in firebase by the children\n    // gets the download url then sets the image from firebase as the value for the imgUrl key:\n    storage\n      .ref(&#39;images&#39;)\n      .child(imageAsFile.name)\n      .getDownloadURL()\n      .then((fireBaseUrl) =&gt; {\n        setImageAsUrl((prevObject) =&gt; ({ ...prevObject, imgUrl: fireBaseUrl }));\n      });\n  }\n);\n};</code>\n        </deckgo-highlight-code>\n<p>不用特地創建資料夾，會自動依據 ref 路徑創建</p>\n</li>\n</ul>\n<h2>Hosting</h2>\n<p><a href=\"https://firebase.google.com/docs/hosting/quickstart\" target=\"_blank\" rel=\"nofollow\">靜態網站部署</a>\n<img src=\"https://i.imgur.com/pFWVeoW.png\"></p>\n<ul>\n<li>先 build 出靜態網站</li>\n<li><code>curl -sL https://firebase.tools | bash</code> 安裝 cli</li>\n<li>沒有登入過的話 <code>firebase login</code>（google 帳號）</li>\n<li><code>mkdir firebase</code>\n<code>cd firebase</code>\n<code>firebase init</code>\n把 build 一整包 cp 到 firebase 下\n<code>firebase.json</code> 的 public 改為 build\n<code>firebase serve</code>\n<code>firebase deploy</code>\n<img src=\"https://i.imgur.com/QMJX73c.png\">\n可以看到發版版號、人、時間，還可以迅速復原\n<a href=\"https://vuechatroom-b8368.web.app/\" target=\"_blank\" rel=\"nofollow\">https://vuechatroom-b8368.web.app/</a></li>\n</ul>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://blog.gcp.expert/compare-firebase-cloud-firestore-with-realtime-database/\" target=\"_blank\" rel=\"nofollow\">Firebase Cloud Firestore 及 Realtime Database 介紹及比較</a></li>\n<li><a href=\"https://css-tricks.com/building-a-real-time-chat-app-with-react-and-firebase/\" target=\"_blank\" rel=\"nofollow\">Building a Real-Time Chat App with React and Firebase</a></li>\n<li><a href=\"https://dev.to/itnext/how-to-do-image-upload-with-firebase-in-react-cpj\" target=\"_blank\" rel=\"nofollow\">How to do image upload with firebase in react</a></li>\n</ul>","timeToRead":14,"frontmatter":{"title":"常用 NoSQL 雲端資料庫 - Part 2 Firebase","date":"27 May 2020","tags":["firebase"],"path":"blog/20200527","excerpt":"簡介 Google 提供的後端服務平臺（BaaS）中的兩種 DB，realtime database 和 cloud firestore。"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"path":"blog/20210110","title":"Pop Quiz","tags":["javascript"],"excerpt":"記錄踩到的陷阱題。"}}},{"node":{"frontmatter":{"path":"blog/20210109-3","title":"REST / RESTful & HTTP Methods","tags":["javascript"],"excerpt":"簡易整理。"}}},{"node":{"frontmatter":{"path":"blog/20191107","title":"Javascript Event loop - macro task & micro task","tags":["javascript"],"excerpt":"介紹 Event loop 容易混淆的異步任務 macro task & micro task。"}}},{"node":{"frontmatter":{"path":"blog/20210109","title":"Response Set-Cookie 無效","tags":["apollo"],"excerpt":"記錄個之前在和同事們弄 Side project 時犯蠢遇到的問題與解決方式。"}}},{"node":{"frontmatter":{"path":"blog/20200518","title":"常用 NoSQL 雲端資料庫 - Part 1 MongoDB","tags":["mongodb"],"excerpt":"簡介 Relational/NoSQL database、mongoose ORM 寫 mongo CRUD API。"}}},{"node":{"frontmatter":{"path":"blog/20180521","title":"Web 常見攻擊手法","tags":["security"],"excerpt":"擁有基本的資安觀念保護好自家資料和 user 使用環境是開發人員重要的一點。"}}},{"node":{"frontmatter":{"path":"blog/20190707","title":"JavaScript HTML5 Web Worker & CRA 使用踩雷","tags":["javascript"],"excerpt":"JavaScript 是單執行緒、單線程的程式語言，所有的程式碼片段都會在堆疊中被執行，Web worker 相當於可讓主線程開其他 thread。"}}},{"node":{"frontmatter":{"path":"blog/20180514","title":"JavaScript 中 this 指向","tags":["javascript"],"excerpt":"簡介 this 指向的六種情況。"}}},{"node":{"frontmatter":{"path":"blog/20190108","title":"JavaScript 認識非同步 Callback, Promise, async/await","tags":["javascript"],"excerpt":"Asynchronous 非同步的不同寫法的整理筆記。"}}},{"node":{"frontmatter":{"path":"blog/20170728","title":"WebForm 註冊 JavaScript","tags":["asp.net","javascript"],"excerpt":"動態產生JS在目前公司專案中是滿常用到的小技巧，不同的用法會產生在Web Page 的不同位置而有直譯式語言的前後順序差。"}}},{"node":{"frontmatter":{"path":"blog/20170714","title":"WebForm 使用 reCAPTCHA 驗證","tags":["asp.net"],"excerpt":"這個我不是機器人驗證一定不陌生，滿多登入畫面會看到的，剛好今天接到把圖形驗證改為 reCAPTCHA 就順手記下。"}}},{"node":{"frontmatter":{"path":"blog/20170604","title":"Web App 推播通知","tags":["asp.net"],"excerpt":"隨著行動和穿載裝置的興起，推播通知 (Push Notification) 成為維繫App用戶關係相當有力的工具"}}},{"node":{"frontmatter":{"path":"blog/20190906","title":"初探 Storybook","tags":["javascript"],"excerpt":"初探這款能夠在開發前端元件或是函式庫的同時，可以快速地建立元件各種操作模式或是樣式的工具。"}}},{"node":{"frontmatter":{"path":"blog/20170421","title":"存取遠端 EventLog","tags":["asp.net","javascript"],"excerpt":"在公司中實作一個 Event log 的查詢工具。（之後來寫了 D3 呈現查詢異常查詢的部分）"}}},{"node":{"frontmatter":{"path":"blog/20170508","title":"WebForm 圖片上傳檢查","tags":["asp.net"],"excerpt":"開放上傳有可能被傳奇怪東西的風險，只檢查所看到的副檔名，謹慎來說似乎是不夠的。"}}},{"node":{"frontmatter":{"path":"blog/20210109-2","title":"IntersectionObserver","tags":["javascript"],"excerpt":"公司專案有個日期連動的 scroll 優化試驗，原先是監聽 scroll。"}}},{"node":{"frontmatter":{"path":"blog/20191125","title":"初探 RxJS（下）","tags":["rxjs"],"excerpt":"簡介上次未完的 RxJS 剩餘角色，和介紹目前公司後台專案使用的 redux-observable。"}}},{"node":{"frontmatter":{"path":"blog/20200630","title":"Express - Authentication, Authorization and Security","tags":["security","express"],"excerpt":"簡介 Express RESTful API Server 範例中 JWT 權限、授權相關。"}}},{"node":{"frontmatter":{"path":"blog/20200910","title":"Apollo Server 入門篇","tags":["apollo"],"excerpt":"快速複習去年分享的 GraphQL Schema 和 Client query 語法，並簡介如何以 Apollo Server 建立 GraphQL Server。"}}},{"node":{"frontmatter":{"path":"blog/20190906-2","title":"React Hooks - useCallback, useMemo, useRef","tags":["reactjs"],"excerpt":"JavaScript 是單執行緒、單線程的程式語言，所有的程式碼片段都會在堆疊中被執行，Web worker 相當於可讓主線程開其他 thread。"}}},{"node":{"frontmatter":{"path":"blog/20190907","title":"GraphQL & Apollo Client","tags":["apollo"],"excerpt":"簡單介紹 React Client 端如何用 Apollo 對 GraphQL Server 做資料存取操作。"}}},{"node":{"frontmatter":{"path":"blog/20191017","title":"初探 RxJS（上）","tags":["rxjs"],"excerpt":"簡介相關的設計模式中的 Behavioral Pattern，再介紹 RxJS（先講 Observable）"}}},{"node":{"frontmatter":{"path":"blog/20190909","title":"Prisma - Schema, Data Model, Relations, Client","tags":["prisma"],"excerpt":"未來 Side project 可能會應用到的 SDL first 開發流程角度，簡介此可以取代傳統 ORM 的 DB toolkit。"}}}]}},"pageContext":{"postPath":"blog/20200527","translations":[{"hreflang":"en","path":"/blog/20200527"}]}},"staticQueryHashes":["4097791827"]}