{"version":3,"sources":["webpack:///./src/templates/tags/index.jsx","webpack:///./src/components/PostCard/index.jsx","webpack:///./src/templates/tags/tags.module.less"],"names":["TagPage","data","tag","pageContext","tagObj","Config","tags","tagName","name","Utils","capitalize","tagPagePath","pages","tagImage","allFile","edges","find","edge","node","childImageSharp","fluid","posts","allMarkdownRemark","className","title","description","path","resolvePageUrl","keywords","style","tagsList","bannerImgContainer","bannerImg","alt","gutter","map","post","key","xs","sm","md","lg","PostCard","props","frontmatter","postCard","to","postCardText","backgroundColor","color","dateHolder","date","moment","format","mrTp20","excerpt","module","exports"],"mappings":"wUAiHeA,UAjGC,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KACTC,EADiC,EAAlBC,YACfD,IACFE,EAASC,IAAOC,KAAKJ,IAAQ,GAC7BK,EAAUH,EAAOI,MAAQC,IAAMC,WAAWR,GAC1CS,EAAcN,IAAOO,MAAMV,IAC3BW,EAAWZ,EAAKa,QAAQC,MAAMC,MAAK,SAACC,GAAD,OAAUA,EAAKC,KAAKV,OAASN,KAClED,EAAKa,QAAQC,MAAMC,MAAK,SAACC,GAAD,OAAUA,EAAKC,KAAKV,OAASN,KAAKgB,KAAKC,gBAAgBC,MAC/E,KACEC,EAAQpB,EAAKqB,kBAAkBP,MACrC,OACE,uBAAQQ,UAAU,gBAChB,uBAAQA,UAAU,aAChB,kBAAC,IAAD,MACA,kBAAC,IAAD,CACEC,MAAOjB,EACPkB,YAAW,kBAAoBlB,EAApB,KAAgCH,EAAOqB,YAAvC,IACXC,KAAMjB,IAAMkB,eAAehB,EAAaT,GACxC0B,SAAU,CAACrB,KAEb,kBAAC,IAAD,KACE,yBAAKgB,UAAS,kBAAoBM,IAAMC,UACtC,gCAAMvB,GACN,yBAAKgB,UAAWM,IAAME,oBACpB,kBAAC,IAAD,CAAKR,UAAWM,IAAMG,UAAWZ,MAAOP,EAAUoB,IAAK1B,KAEzD,wBAAIgB,UAAU,cAAcnB,EAAOqB,cAErC,uBAAKS,OAAQ,CAAC,GAAI,KACfb,EAAMc,KAAI,SAACC,EAAMC,GAAP,OAET,uBAAKA,IAAKA,EAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GACzC,kBAAC,IAAD,CAAUxC,KAAMmC,c,kCC/ChC,gHAyCeM,IAlCE,SAACC,GAAW,IAAD,EAKtBA,EAHF1C,KACEiB,KAAQ0B,mBAHc,MAGA,CAAEtC,KAAM,IAHR,EAO1B,OACE,yBAAKiB,UAAWM,IAAMgB,UACpB,kBAAC,OAAD,CAAMC,GAAIrC,IAAMkB,eAAeiB,EAAYlB,OACzC,yBACEH,UAAWM,IAAMkB,aACjBlB,MAAO,CACLmB,gBAAiB1C,OAAKsC,EAAYtC,KAAK,IAAI2C,QAG5CL,EAAYpB,MACb,0BAAMD,UAAWM,IAAMqB,YACpBN,EAAYO,KAAOC,IAAOR,EAAYO,MAAME,OAAO,cAAgB,MAI1E,yBAAK9B,UAAWM,IAAMyB,QACpB,uBAAG/B,UAAWM,IAAM0B,SAAUX,EAAYW,SAC1C,2BACGX,EAAYtC,KAAK6B,KAAI,SAACjC,GAAD,OACpB,kBAAC,OAAD,CAAMmC,IAAKnC,EAAKqB,UAAWM,IAAM3B,IAAK4C,GAAE,SAAW5C,GAAnD,IAA+DA,EAA/D,a,qBChCZsD,EAAOC,QAAU,CAAC,SAAW,+BAA+B,mBAAqB,yCAAyC,UAAY","file":"component---src-templates-tags-index-jsx-884ce8d6e8fe36915283.js","sourcesContent":["/* eslint-disable react/forbid-prop-types */\n/* Vendor imports */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\nimport Img from 'gatsby-image';\nimport { Layout, Row, Col } from 'antd';\n/* App imports */\nimport SEO from '../../components/Seo';\nimport Header from '../../components/PageLayout/Header';\nimport PostCard from '../../components/PostCard';\nimport SidebarWrapper from '../../components/PageLayout/Sidebar';\nimport Config from '../../../config';\nimport Utils from '../../utils/pageUtils';\nimport style from './tags.module.less';\n\nconst TagPage = ({ data, pageContext }) => {\n  const { tag } = pageContext;\n  const tagObj = Config.tags[tag] || {};\n  const tagName = tagObj.name || Utils.capitalize(tag);\n  const tagPagePath = Config.pages.tag;\n  const tagImage = data.allFile.edges.find((edge) => edge.node.name === tag)\n    ? data.allFile.edges.find((edge) => edge.node.name === tag).node.childImageSharp.fluid\n    : null;\n  const posts = data.allMarkdownRemark.edges;\n  return (\n    <Layout className=\"outerPadding\">\n      <Layout className=\"container\">\n        <Header />\n        <SEO\n          title={tagName}\n          description={`All post about ${tagName}. ${tagObj.description} `}\n          path={Utils.resolvePageUrl(tagPagePath, tag)}\n          keywords={[tagName]}\n        />\n        <SidebarWrapper>\n          <div className={`marginTopTitle ${style.tagsList}`}>\n            <h1>#{tagName}</h1>\n            <div className={style.bannerImgContainer}>\n              <Img className={style.bannerImg} fluid={tagImage} alt={tagName} />\n            </div>\n            <h4 className=\"textCenter\">{tagObj.description}</h4>\n          </div>\n          <Row gutter={[20, 20]}>\n            {posts.map((post, key) => (\n              // eslint-disable-next-line react/no-array-index-key\n              <Col key={key} xs={24} sm={24} md={12} lg={8}>\n                <PostCard data={post} />\n              </Col>\n            ))}\n          </Row>\n        </SidebarWrapper>\n      </Layout>\n    </Layout>\n  );\n};\n\nTagPage.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(PropTypes.object).isRequired,\n    }).isRequired,\n    allFile: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            name: PropTypes.string.isRequired,\n            childImageSharp: PropTypes.shape({\n              fluid: PropTypes.object.isRequired,\n            }).isRequired,\n          }).isRequired,\n        }),\n      ).isRequired,\n    }).isRequired,\n  }).isRequired,\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport const pageQuery = graphql`\n  query($tag: String!) {\n    allMarkdownRemark(\n      filter: { frontmatter: { tags: { in: [$tag] } }, fileAbsolutePath: { regex: \"/index.md$/\" } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            tags\n            excerpt\n          }\n        }\n      }\n    }\n    allFile(filter: { name: { eq: $tag }, dir: { regex: \"/tags$/\" } }) {\n      edges {\n        node {\n          name\n          childImageSharp {\n            fluid(maxHeight: 600) {\n              ...GatsbyImageSharpFluid_tracedSVG\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default TagPage;\n","import React from 'react';\nimport moment from 'moment';\nimport { Link } from 'gatsby';\nimport style from './postCard.module.less';\nimport Utils from '../../utils/pageUtils';\nimport { tags } from '../../../config';\n\nconst PostCard = (props) => {\n  const {\n    data: {\n      node: { frontmatter = { tags: [] } },\n    },\n  } = props;\n\n  return (\n    <div className={style.postCard}>\n      <Link to={Utils.resolvePageUrl(frontmatter.path)}>\n        <div\n          className={style.postCardText}\n          style={{\n            backgroundColor: tags[frontmatter.tags[0]].color,\n          }}\n        >\n          {frontmatter.title}\n          <span className={style.dateHolder}>\n            {frontmatter.date ? moment(frontmatter.date).format('YYYY/MM/DD') : ''}\n          </span>\n        </div>\n      </Link>\n      <div className={style.mrTp20}>\n        <p className={style.excerpt}>{frontmatter.excerpt}</p>\n        <p>\n          {frontmatter.tags.map((tag) => (\n            <Link key={tag} className={style.tag} to={`/tags/${tag}`}>{`#${tag} `}</Link>\n          ))}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default PostCard;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tagsList\":\"tags-module--tagsList--39vLn\",\"bannerImgContainer\":\"tags-module--bannerImgContainer--24LjU\",\"bannerImg\":\"tags-module--bannerImg--xzH6c\"};"],"sourceRoot":""}